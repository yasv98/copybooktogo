// Code generated by pigeon; DO NOT EDIT.

// This generated code depends on functions from parser_helpers
package parse

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

const astBuilderKey = "AST"

// BuildAST parses a normalised copybook and returns the AST.
func BuildAST(copybook []byte) ([]*Record, error) {
	// Initialise the generated parser with the AST builder.
	parsedAST, err := Parse("", copybook, InitState(astBuilderKey, &astBuilder{}))
	if err != nil {
		return nil, fmt.Errorf("failed to parse copybook: %w", err)
	}

	ast, ok := parsedAST.([]*Record)
	if !ok {
		return nil, fmt.Errorf("failed to cast parsed records to *[]Record")
	}

	return ast, nil
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Copybook",
			pos:  position{line: 24, col: 1, offset: 669},
			expr: &actionExpr{
				pos: position{line: 24, col: 13, offset: 681},
				run: (*parser).callonCopybook1,
				expr: &oneOrMoreExpr{
					pos: position{line: 24, col: 13, offset: 681},
					expr: &ruleRefExpr{
						pos:  position{line: 24, col: 13, offset: 681},
						name: "Data",
					},
				},
			},
		},
		{
			name: "Data",
			pos:  position{line: 28, col: 1, offset: 731},
			expr: &seqExpr{
				pos: position{line: 28, col: 9, offset: 739},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 28, col: 9, offset: 739},
						name: "Space",
					},
					&choiceExpr{
						pos: position{line: 28, col: 16, offset: 746},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 28, col: 16, offset: 746},
								name: "CommentLine",
							},
							&ruleRefExpr{
								pos:  position{line: 28, col: 30, offset: 760},
								name: "Record",
							},
							&ruleRefExpr{
								pos:  position{line: 28, col: 39, offset: 769},
								name: "BlankLine",
							},
							&ruleRefExpr{
								pos:  position{line: 28, col: 51, offset: 781},
								name: "UnknownLine",
							},
						},
					},
					&choiceExpr{
						pos: position{line: 28, col: 65, offset: 795},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 28, col: 65, offset: 795},
								name: "EOL",
							},
							&ruleRefExpr{
								pos:  position{line: 28, col: 71, offset: 801},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "CommentLine",
			pos:  position{line: 31, col: 1, offset: 879},
			expr: &actionExpr{
				pos: position{line: 31, col: 16, offset: 894},
				run: (*parser).callonCommentLine1,
				expr: &seqExpr{
					pos: position{line: 31, col: 16, offset: 894},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 31, col: 16, offset: 894},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&ruleRefExpr{
							pos:  position{line: 31, col: 20, offset: 898},
							name: "RestOfLine",
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 40, col: 1, offset: 1111},
			expr: &actionExpr{
				pos: position{line: 40, col: 14, offset: 1124},
				run: (*parser).callonBlankLine1,
				expr: &andExpr{
					pos: position{line: 40, col: 14, offset: 1124},
					expr: &ruleRefExpr{
						pos:  position{line: 40, col: 15, offset: 1125},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UnknownLine",
			pos:  position{line: 45, col: 1, offset: 1240},
			expr: &actionExpr{
				pos: position{line: 45, col: 16, offset: 1255},
				run: (*parser).callonUnknownLine1,
				expr: &ruleRefExpr{
					pos:  position{line: 45, col: 16, offset: 1255},
					name: "RestOfLine",
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 50, col: 1, offset: 1428},
			expr: &seqExpr{
				pos: position{line: 50, col: 11, offset: 1438},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 50, col: 11, offset: 1438},
						label: "level",
						expr: &ruleRefExpr{
							pos:  position{line: 50, col: 17, offset: 1444},
							name: "Level",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 23, offset: 1450},
						name: "SpacesOrEOLs",
					},
					&labeledExpr{
						pos:   position{line: 50, col: 36, offset: 1463},
						label: "identifier",
						expr: &ruleRefExpr{
							pos:  position{line: 50, col: 47, offset: 1474},
							name: "Identifier",
						},
					},
					&labeledExpr{
						pos:   position{line: 50, col: 58, offset: 1485},
						label: "clauses",
						expr: &zeroOrMoreExpr{
							pos: position{line: 50, col: 66, offset: 1493},
							expr: &actionExpr{
								pos: position{line: 50, col: 67, offset: 1494},
								run: (*parser).callonRecord9,
								expr: &seqExpr{
									pos: position{line: 50, col: 67, offset: 1494},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 50, col: 67, offset: 1494},
											name: "SpacesOrEOLs",
										},
										&labeledExpr{
											pos:   position{line: 50, col: 80, offset: 1507},
											label: "cl",
											expr: &ruleRefExpr{
												pos:  position{line: 50, col: 83, offset: 1510},
												name: "Clause",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 109, offset: 1536},
						name: "DOT",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 113, offset: 1540},
						name: "RestOfLine",
					},
					&stateCodeExpr{
						pos: position{line: 50, col: 124, offset: 1551},
						run: (*parser).callonRecord16,
					},
				},
			},
		},
		{
			name: "Level",
			pos:  position{line: 53, col: 1, offset: 1643},
			expr: &actionExpr{
				pos: position{line: 53, col: 10, offset: 1652},
				run: (*parser).callonLevel1,
				expr: &seqExpr{
					pos: position{line: 53, col: 10, offset: 1652},
					exprs: []any{
						&charClassMatcher{
							pos:             position{line: 53, col: 10, offset: 1652},
							val:             "[0-9]",
							ranges:          []rune{'0', '9'},
							basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
							ignoreCase:      false,
							inverted:        false,
						},
						&zeroOrOneExpr{
							pos: position{line: 53, col: 15, offset: 1657},
							expr: &charClassMatcher{
								pos:             position{line: 53, col: 15, offset: 1657},
								val:             "[0-9]",
								ranges:          []rune{'0', '9'},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
								ignoreCase:      false,
								inverted:        false,
							},
						},
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 56, col: 1, offset: 1705},
			expr: &actionExpr{
				pos: position{line: 56, col: 15, offset: 1719},
				run: (*parser).callonIdentifier1,
				expr: &seqExpr{
					pos: position{line: 56, col: 15, offset: 1719},
					exprs: []any{
						&andExpr{
							pos: position{line: 56, col: 15, offset: 1719},
							expr: &ruleRefExpr{
								pos:  position{line: 56, col: 16, offset: 1720},
								name: "LetterCheck",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 56, col: 28, offset: 1732},
							expr: &charClassMatcher{
								pos:             position{line: 56, col: 28, offset: 1732},
								val:             "[A-Z0-9-:]",
								chars:           []rune{'-', ':'},
								ranges:          []rune{'A', 'Z', '0', '9'},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
								ignoreCase:      false,
								inverted:        false,
							},
						},
					},
				},
			},
		},
		{
			name: "LetterCheck",
			pos:  position{line: 59, col: 1, offset: 1780},
			expr: &seqExpr{
				pos: position{line: 59, col: 16, offset: 1795},
				exprs: []any{
					&zeroOrMoreExpr{
						pos: position{line: 59, col: 16, offset: 1795},
						expr: &charClassMatcher{
							pos:             position{line: 59, col: 16, offset: 1795},
							val:             "[0-9-:]",
							chars:           []rune{'-', ':'},
							ranges:          []rune{'0', '9'},
							basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
							ignoreCase:      false,
							inverted:        false,
						},
					},
					&charClassMatcher{
						pos:             position{line: 59, col: 25, offset: 1804},
						val:             "[A-Z]",
						ranges:          []rune{'A', 'Z'},
						basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
						ignoreCase:      false,
						inverted:        false,
					},
				},
			},
		},
		{
			name: "Clause",
			pos:  position{line: 60, col: 1, offset: 1871},
			expr: &choiceExpr{
				pos: position{line: 60, col: 12, offset: 1882},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 60, col: 12, offset: 1882},
						name: "RedefinesClause",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 30, offset: 1900},
						name: "PictureClause",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 46, offset: 1916},
						name: "OccursClause",
					},
				},
			},
		},
		{
			name: "RedefinesClause",
			pos:  position{line: 64, col: 1, offset: 1943},
			expr: &actionExpr{
				pos: position{line: 64, col: 20, offset: 1962},
				run: (*parser).callonRedefinesClause1,
				expr: &seqExpr{
					pos: position{line: 64, col: 20, offset: 1962},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 64, col: 20, offset: 1962},
							val:        "REDEFINES",
							ignoreCase: false,
							want:       "\"REDEFINES\"",
						},
						&ruleRefExpr{
							pos:  position{line: 64, col: 32, offset: 1974},
							name: "SpacesOrEOLs",
						},
						&labeledExpr{
							pos:   position{line: 64, col: 45, offset: 1987},
							label: "identifier",
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 56, offset: 1998},
								name: "Identifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PictureClause",
			pos:  position{line: 68, col: 1, offset: 2063},
			expr: &actionExpr{
				pos: position{line: 68, col: 18, offset: 2080},
				run: (*parser).callonPictureClause1,
				expr: &seqExpr{
					pos: position{line: 68, col: 18, offset: 2080},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 68, col: 18, offset: 2080},
							name: "PicKeyword",
						},
						&ruleRefExpr{
							pos:  position{line: 68, col: 29, offset: 2091},
							name: "Space",
						},
						&labeledExpr{
							pos:   position{line: 68, col: 35, offset: 2097},
							label: "picString",
							expr: &ruleRefExpr{
								pos:  position{line: 68, col: 45, offset: 2107},
								name: "PicString",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 68, col: 55, offset: 2117},
							expr: &seqExpr{
								pos: position{line: 68, col: 56, offset: 2118},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 68, col: 56, offset: 2118},
										name: "SpacesOrEOLs",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 69, offset: 2131},
										name: "Comp",
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 68, col: 76, offset: 2138},
							expr: &seqExpr{
								pos: position{line: 68, col: 77, offset: 2139},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 68, col: 77, offset: 2139},
										name: "SpacesOrEOLs",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 90, offset: 2152},
										name: "Justified",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PicKeyword",
			pos:  position{line: 71, col: 1, offset: 2214},
			expr: &choiceExpr{
				pos: position{line: 71, col: 15, offset: 2228},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 71, col: 15, offset: 2228},
						val:        "PICTURE",
						ignoreCase: false,
						want:       "\"PICTURE\"",
					},
					&litMatcher{
						pos:        position{line: 71, col: 27, offset: 2240},
						val:        "PIC",
						ignoreCase: false,
						want:       "\"PIC\"",
					},
				},
			},
		},
		{
			name: "PicString",
			pos:  position{line: 72, col: 1, offset: 2246},
			expr: &actionExpr{
				pos: position{line: 72, col: 14, offset: 2259},
				run: (*parser).callonPicString1,
				expr: &seqExpr{
					pos: position{line: 72, col: 14, offset: 2259},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 72, col: 14, offset: 2259},
							name: "PicStartChar",
						},
						&zeroOrMoreExpr{
							pos: position{line: 72, col: 27, offset: 2272},
							expr: &seqExpr{
								pos: position{line: 72, col: 28, offset: 2273},
								exprs: []any{
									&notExpr{
										pos: position{line: 72, col: 28, offset: 2273},
										expr: &ruleRefExpr{
											pos:  position{line: 72, col: 29, offset: 2274},
											name: "PicEnd",
										},
									},
									&anyMatcher{
										line: 72, col: 36, offset: 2281,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PicStartChar",
			pos:  position{line: 75, col: 1, offset: 2320},
			expr: &charClassMatcher{
				pos:             position{line: 75, col: 17, offset: 2336},
				val:             "[X9ASVP]",
				chars:           []rune{'X', '9', 'A', 'S', 'V', 'P'},
				basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
				ignoreCase:      false,
				inverted:        false,
			},
		},
		{
			name: "PicEnd",
			pos:  position{line: 76, col: 1, offset: 2345},
			expr: &seqExpr{
				pos: position{line: 76, col: 11, offset: 2355},
				exprs: []any{
					&zeroOrOneExpr{
						pos: position{line: 76, col: 11, offset: 2355},
						expr: &ruleRefExpr{
							pos:  position{line: 76, col: 11, offset: 2355},
							name: "DOT",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 76, col: 16, offset: 2360},
						name: "Space",
					},
				},
			},
		},
		{
			name: "Comp",
			pos:  position{line: 77, col: 1, offset: 2366},
			expr: &choiceExpr{
				pos: position{line: 77, col: 10, offset: 2375},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 77, col: 10, offset: 2375},
						val:        "COMP-5",
						ignoreCase: false,
						want:       "\"COMP-5\"",
					},
					&litMatcher{
						pos:        position{line: 77, col: 21, offset: 2386},
						val:        "COMP-4",
						ignoreCase: false,
						want:       "\"COMP-4\"",
					},
					&litMatcher{
						pos:        position{line: 77, col: 32, offset: 2397},
						val:        "COMP-3",
						ignoreCase: false,
						want:       "\"COMP-3\"",
					},
					&litMatcher{
						pos:        position{line: 77, col: 43, offset: 2408},
						val:        "COMP-2",
						ignoreCase: false,
						want:       "\"COMP-2\"",
					},
					&litMatcher{
						pos:        position{line: 77, col: 54, offset: 2419},
						val:        "COMP-1",
						ignoreCase: false,
						want:       "\"COMP-1\"",
					},
					&litMatcher{
						pos:        position{line: 77, col: 65, offset: 2430},
						val:        "COMP",
						ignoreCase: false,
						want:       "\"COMP\"",
					},
				},
			},
		},
		{
			name: "Justified",
			pos:  position{line: 78, col: 1, offset: 2495},
			expr: &seqExpr{
				pos: position{line: 78, col: 14, offset: 2508},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 78, col: 14, offset: 2508},
						val:        "JUSTIFIED",
						ignoreCase: false,
						want:       "\"JUSTIFIED\"",
					},
					&ruleRefExpr{
						pos:  position{line: 78, col: 26, offset: 2520},
						name: "SpacesOrEOLs",
					},
					&litMatcher{
						pos:        position{line: 78, col: 39, offset: 2533},
						val:        "RIGHT",
						ignoreCase: false,
						want:       "\"RIGHT\"",
					},
				},
			},
		},
		{
			name: "OccursClause",
			pos:  position{line: 80, col: 1, offset: 2613},
			expr: &actionExpr{
				pos: position{line: 80, col: 17, offset: 2629},
				run: (*parser).callonOccursClause1,
				expr: &seqExpr{
					pos: position{line: 80, col: 17, offset: 2629},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 80, col: 17, offset: 2629},
							val:        "OCCURS",
							ignoreCase: false,
							want:       "\"OCCURS\"",
						},
						&ruleRefExpr{
							pos:  position{line: 80, col: 26, offset: 2638},
							name: "SpacesOrEOLs",
						},
						&labeledExpr{
							pos:   position{line: 80, col: 39, offset: 2651},
							label: "count",
							expr: &ruleRefExpr{
								pos:  position{line: 80, col: 45, offset: 2657},
								name: "Count",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 80, col: 51, offset: 2663},
							expr: &seqExpr{
								pos: position{line: 80, col: 52, offset: 2664},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 80, col: 52, offset: 2664},
										name: "SpacesOrEOLs",
									},
									&litMatcher{
										pos:        position{line: 80, col: 65, offset: 2677},
										val:        "TIMES",
										ignoreCase: false,
										want:       "\"TIMES\"",
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 80, col: 75, offset: 2687},
							expr: &seqExpr{
								pos: position{line: 80, col: 76, offset: 2688},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 80, col: 76, offset: 2688},
										name: "SpacesOrEOLs",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 89, offset: 2701},
										name: "IndexedBy",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Count",
			pos:  position{line: 83, col: 1, offset: 2758},
			expr: &actionExpr{
				pos: position{line: 83, col: 10, offset: 2767},
				run: (*parser).callonCount1,
				expr: &oneOrMoreExpr{
					pos: position{line: 83, col: 10, offset: 2767},
					expr: &charClassMatcher{
						pos:             position{line: 83, col: 10, offset: 2767},
						val:             "[0-9]",
						ranges:          []rune{'0', '9'},
						basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
						ignoreCase:      false,
						inverted:        false,
					},
				},
			},
		},
		{
			name: "IndexedBy",
			pos:  position{line: 86, col: 1, offset: 2815},
			expr: &seqExpr{
				pos: position{line: 86, col: 14, offset: 2828},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 86, col: 14, offset: 2828},
						val:        "INDEXED BY",
						ignoreCase: false,
						want:       "\"INDEXED BY\"",
					},
					&ruleRefExpr{
						pos:  position{line: 86, col: 27, offset: 2841},
						name: "SpacesOrEOLs",
					},
					&ruleRefExpr{
						pos:  position{line: 86, col: 40, offset: 2854},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "DOT",
			pos:  position{line: 90, col: 1, offset: 2940},
			expr: &litMatcher{
				pos:        position{line: 90, col: 8, offset: 2947},
				val:        ".",
				ignoreCase: false,
				want:       "\".\"",
			},
		},
		{
			name: "Space",
			pos:  position{line: 91, col: 1, offset: 2951},
			expr: &oneOrMoreExpr{
				pos: position{line: 91, col: 10, offset: 2960},
				expr: &charClassMatcher{
					pos:             position{line: 91, col: 10, offset: 2960},
					val:             "[ \\t]",
					chars:           []rune{' ', '\t'},
					basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
					ignoreCase:      false,
					inverted:        false,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 92, col: 1, offset: 2967},
			expr: &charClassMatcher{
				pos:             position{line: 92, col: 8, offset: 2974},
				val:             "[\\n\\r]",
				chars:           []rune{'\n', '\r'},
				basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
				ignoreCase:      false,
				inverted:        false,
			},
		},
		{
			name: "EOF",
			pos:  position{line: 93, col: 1, offset: 2981},
			expr: &notExpr{
				pos: position{line: 93, col: 8, offset: 2988},
				expr: &anyMatcher{
					line: 93, col: 9, offset: 2989,
				},
			},
		},
		{
			name: "RestOfLine",
			pos:  position{line: 94, col: 1, offset: 2991},
			expr: &zeroOrMoreExpr{
				pos: position{line: 94, col: 15, offset: 3005},
				expr: &seqExpr{
					pos: position{line: 94, col: 16, offset: 3006},
					exprs: []any{
						&notExpr{
							pos: position{line: 94, col: 16, offset: 3006},
							expr: &ruleRefExpr{
								pos:  position{line: 94, col: 17, offset: 3007},
								name: "EOL",
							},
						},
						&anyMatcher{
							line: 94, col: 21, offset: 3011,
						},
					},
				},
			},
		},
		{
			name: "SpacesOrEOLs",
			pos:  position{line: 95, col: 1, offset: 3015},
			expr: &oneOrMoreExpr{
				pos: position{line: 95, col: 17, offset: 3031},
				expr: &choiceExpr{
					pos: position{line: 95, col: 18, offset: 3032},
					alternatives: []any{
						&ruleRefExpr{
							pos:  position{line: 95, col: 18, offset: 3032},
							name: "Space",
						},
						&ruleRefExpr{
							pos:  position{line: 95, col: 26, offset: 3040},
							name: "EOL",
						},
					},
				},
			},
		},
	},
}

func (c *current) onCopybook1() (any, error) {
	return getAST(c.state[astBuilderKey])
}

func (p *parser) callonCopybook1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopybook1()
}

func (c *current) onCommentLine1() (any, error) {
	indicatorAreaColumn := 7
	if c.pos.col == indicatorAreaColumn {
		return fmt.Println("Ignoring comment line: ", string(c.text))
	}
	return nil, nil
}

func (p *parser) callonCommentLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentLine1()
}

func (c *current) onBlankLine1() (any, error) {
	return fmt.Println("Ignoring blank line")
}

func (p *parser) callonBlankLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onUnknownLine1() (any, error) {
	return fmt.Println("Ignoring unknown line: ", string(c.text))
}

func (p *parser) callonUnknownLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnknownLine1()
}

func (c *current) onRecord9(cl any) (any, error) {
	return cl, nil
}

func (p *parser) callonRecord9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord9(stack["cl"])
}

func (c *current) onRecord16(level, identifier, clauses any) error {
	return createAndAddRecordToAST(c.state[astBuilderKey], level, identifier, clauses)
}

func (p *parser) callonRecord16() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord16(stack["level"], stack["identifier"], stack["clauses"])
}

func (c *current) onLevel1() (any, error) {
	return parseIntFromBytes(c.text)
}

func (p *parser) callonLevel1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLevel1()
}

func (c *current) onIdentifier1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1()
}

func (c *current) onRedefinesClause1(identifier any) (any, error) {
	return getRedefinesClauseDetails(identifier)
}

func (p *parser) callonRedefinesClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRedefinesClause1(stack["identifier"])
}

func (c *current) onPictureClause1(picString any) (any, error) {
	return getPictureClauseDetails(picString)
}

func (p *parser) callonPictureClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPictureClause1(stack["picString"])
}

func (c *current) onPicString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonPicString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPicString1()
}

func (c *current) onOccursClause1(count any) (any, error) {
	return getOccursClauseDetails(count)
}

func (p *parser) callonOccursClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOccursClause1(stack["count"])
}

func (c *current) onCount1() (any, error) {
	return parseIntFromBytes(c.text)
}

func (p *parser) callonCount1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCount1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	var (
		val any
		ok  bool
	)

	val, ok = p.parseRule(rule)

	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	val, ok := p.parseExpr(expr)

	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	if cur < 128 {
		if chr.basicLatinChars[cur] != chr.inverted {
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			return val, ok
		}
		p.restoreState(state)
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
